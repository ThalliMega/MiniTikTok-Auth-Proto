syntax = "proto3";

package mini_tiktok.proto.user;

option go_package = "pb/user";

// Does self follow targets?
message FollowCheckRequests {
  // Your own id.
  int64 self_id = 1;
  // The target user ids.
  repeated int64 target_ids = 2;
}

message IdWithInt64Values {
  message IdWithInt64Value {
    int64 user_id = 1;
    int64 value = 2;
  }
  repeated IdWithInt64Value responses = 1;
}

// All targets that are in the request targets && followed by self.
message FollowCheckResponses {
  // The people you follow.
  repeated int64 target_ids = 1;
}

message UserIds { repeated int64 user_ids = 1; }

message IdWithStringValues {
  message IdWithStringValue {
    int64 user_id = 1;
    string value = 2;
  }
  repeated IdWithStringValue responses = 1;
}

message UserInfo {
  int64 id = 1;
  string username = 2;
  string avatar = 3;
  string background_img = 4;
  string signature = 5;
}

message UserInfos { repeated UserInfo infos = 1; }

message FullUserInfo {
  int64 id = 1;                // 用户id
  string name = 2;             // 用户名称
  int64 follow_count = 3;      // 关注总数
  int64 follower_count = 4;    // 粉丝总数
  bool is_follow = 5;          // true-已关注，false-未关注
  string avatar = 6;           // 用户头像
  string background_image = 7; // 用户个人页顶部大图
  string signature = 8;        // 个人简介
  int64 total_favorited = 9;   // 获赞数量
  int64 work_count = 10;       // 作品数量
  int64 favorite_count = 11;   // 点赞数量
}

message FullUserInfos { repeated FullUserInfo infos = 1; }

// If user id does not exist, returns an empty array.
service UserService {
  rpc GetUsernames(UserIds) returns (IdWithStringValues);
  rpc GetFollowCounts(UserIds) returns (IdWithInt64Values);
  rpc GetFollowerCounts(UserIds) returns (IdWithInt64Values);
  rpc CheckFollows(FollowCheckRequests) returns (FollowCheckResponses);
  rpc GetAvatars(UserIds) returns (IdWithStringValues);
  rpc GetBackgroundImages(UserIds) returns (IdWithStringValues);
  rpc GetSignatures(UserIds) returns (IdWithStringValues);
  rpc GetTotalFavoriteds(UserIds) returns (IdWithInt64Values);
  rpc GetWorkCounts(UserIds) returns (IdWithInt64Values);
  rpc GetFavoriteCounts(UserIds) returns (IdWithInt64Values);
  rpc GetInfos(UserIds) returns (UserInfos);
  rpc GetFullInfos(UserIds) returns (FullUserInfos);
}